/*  ─────────────────────────────────────────────
    Cloudflare Worker  ·  glow-api-…
    ───────────────────────────────────────────── */
	const MODEL = "gpt-4o";           // higher-quality model
	const EXAMPLES = [
	`Quick Wins
	• TikTok Creator Collab – send free sample packs to 5 Ag-TikTokers, ask for a 30-sec field-test clip. Why it works: borrowed reach + authentic proof.
	• SEO Meta-Fix Sprint – optimise the top 20 seed pages' titles & meta descriptions for "heirloom tomato seeds". Why it works: fastest organic uplift.
	Long-Term Bets
	• Community-led Agronomy Hub – launch a Slack group for small-acreage farmers, weekly AMAs with a soil scientist. Why it works: locks-in share-of-voice.`,
	
	`Quick Wins
	• LinkedIn Outreach Blitz – identify 40 ideal B2B seed buyers, send 10 personally-tailored DMs offering a free mini soil-test kit … Why it works: high-intent channel.`,
	`Quick Wins
	• 24-hour Value Post Series – 3-post thread on X about seed germination hacks; CTA to a landing page … Why it works: immediate micro-trust.`,
	];
	
	export default {
	  async fetch(req, env) {
		/* 1. CORS pre-flight */
		if (req.method === "OPTIONS") return new Response(null, cors());
	
		/* 2. only POST /generate */
		const url = new URL(req.url);
		if (req.method !== "POST" || url.pathname !== "/generate") {
		  return new Response(
			JSON.stringify({ ok: true, routes: ["/generate"] }),
			cors()
		  );
		}
	
		/* 3. read JSON body */
		let form;
		try { form = await req.json(); }
		catch { return new Response(JSON.stringify({ error:"bad_json"}), cors(400)); }
	
		/* ─── lookup helpers ─── */
		const channelByMotion = {
		  ecom_checkout: [
			{ channel: "Search", intent: "high", role: "capture" },
			{ channel: "Paid social", intent: "mid", role: "spark demand" }
		  ],
		  saas_checkout: [
			{ channel: "Search", intent: "high", role: "capture" },
			{ channel: "Paid social", intent: "mid", role: "scale" }
		  ],
		  marketplace_checkout: [
			{ channel: "Marketplace ads", intent: "high", role: "capture" },
			{ channel: "Search", intent: "mid", role: "assist" }
		  ],
		  store_visit: [
			{ channel: "Local search", intent: "high", role: "drive visits" },
			{ channel: "Maps/GBP", intent: "high", role: "presence" }
		  ],
		  call_now: [
			{ channel: "Call-extensions search", intent: "high", role: "click to call" },
			{ channel: "Local search", intent: "high", role: "capture" }
		  ],
		  lead_capture: [
			{ channel: "Search", intent: "high", role: "capture" },
			{ channel: "Retargeting", intent: "mid", role: "nudge" }
		  ],
		  booking: [
			{ channel: "Search", intent: "high", role: "capture" },
			{ channel: "Local social", intent: "mid", role: "presence" }
		  ],
		  saas_trial: [
			{ channel: "Search", intent: "high", role: "capture" },
			{ channel: "Content/SEO", intent: "mid", role: "educate" }
		  ],
		  saas_demo: [
			{ channel: "Search", intent: "high", role: "capture" },
			{ channel: "LinkedIn", intent: "mid", role: "target accounts" }
		  ],
		  app_install: [
			{ channel: "App store ads", intent: "high", role: "convert" },
			{ channel: "Paid social", intent: "mid", role: "scale" }
		  ],
		  donation: [
			{ channel: "Search", intent: "high", role: "capture intent" },
			{ channel: "Email", intent: "mid", role: "appeal" }
		  ],
		  wholesale_inquiry: [
			{ channel: "Search", intent: "high", role: "capture B2B" },
			{ channel: "LinkedIn", intent: "mid", role: "prospect" }
		  ],
		  partner_recruitment: [
			{ channel: "Search", intent: "high", role: "capture partners" },
			{ channel: "Partnership outreach", intent: "mid", role: "recruit" }
		  ]
		};
	
		const funnelByMotion = {
		  ecom_checkout: "Awareness → Interest → Purchase",
		  saas_checkout: "Awareness → Trial → Subscription",
		  marketplace_checkout: "Search → Compare → Purchase",
		  store_visit: "Awareness → Interest → Visit → Purchase",
		  call_now: "Problem awareness → Search → Call → Booking",
		  lead_capture: "Awareness → Interest → Lead → Qualification",
		  booking: "Awareness → Interest → Booking",
		  saas_trial: "Awareness → Education → Trial → Conversion",
		  saas_demo: "Awareness → Interest → Demo → Conversion",
		  app_install: "Awareness → Install → Onboarding → Activation",
		  donation: "Awareness → Emotional connection → Donation",
		  wholesale_inquiry: "Awareness → Interest → Inquiry → Partnership",
		  partner_recruitment: "Awareness → Interest → Application → Partnership"
		};
	
		const kpisByMotion = {
		  ecom_checkout: ["Conversion rate", "Cart abandonment rate", "Average order value", "Customer acquisition cost"],
		  saas_checkout: ["Trial to paid conversion", "Monthly recurring revenue", "Customer lifetime value", "Churn rate"],
		  marketplace_checkout: ["Marketplace conversion rate", "Product ranking", "Review score", "Return rate"],
		  store_visit: ["Foot traffic", "Store visit rate", "Visit to purchase conversion", "Local search ranking"],
		  call_now: ["Call volume", "Call to booking rate", "Response time", "Customer satisfaction"],
		  lead_capture: ["Lead conversion rate", "Cost per lead", "Lead quality score", "Sales qualified leads"],
		  booking: ["Booking conversion rate", "Cancellation rate", "Revenue per booking", "Repeat bookings"],
		  saas_trial: ["Trial sign-up rate", "Trial engagement", "Feature adoption", "Trial to paid conversion"],
		  saas_demo: ["Demo booking rate", "Demo to close rate", "Sales cycle length", "Demo no-show rate"],
		  app_install: ["Install rate", "Onboarding completion", "Day 1 retention", "In-app engagement"],
		  donation: ["Donation conversion rate", "Average donation amount", "Donor retention", "Cost per donation"],
		  wholesale_inquiry: ["Inquiry rate", "Inquiry to partnership rate", "Partner lifetime value", "Territory coverage"],
		  partner_recruitment: ["Application rate", "Partner activation rate", "Partner performance", "Network growth"]
		};
	
		const defaultGoalByMotion = {
		  ecom_checkout: "Online orders",
		  saas_checkout: "Paid subscriptions",
		  marketplace_checkout: "Marketplace orders", 
		  store_visit: "In-store sales",
		  call_now: "Bookings",
		  lead_capture: "Qualified leads",
		  booking: "Bookings",
		  saas_trial: "Qualified leads",
		  saas_demo: "Meetings booked",
		  app_install: "Installs with activation",
		  donation: "Donations",
		  wholesale_inquiry: "Wholesale purchase orders",
		  partner_recruitment: "Partner sign-ups",
		  custom: "Goal aligned to custom action"
		};
	
		function applyMotionDefaults(report, form) {
		  if (typeof report.budget !== "object" || report.budget === null || Array.isArray(report.budget)) {
			report.budget = {};
		  }
	
		  const isCustom = form.motion === "custom";
		  if (!isCustom && (!Array.isArray(report.channel_playbook) || report.channel_playbook.length === 0)) {
			report.channel_playbook = channelByMotion[form.motion] || [];
		  }
	
		  report.budget.band = form.budget_band || report.budget.band || "low";
		  return report;
		}
	
		function stripCurrencyAndAmounts(report) {
		  const walk = (obj) => {
			if (!obj || typeof obj !== "object") return;
			for (const k of Object.keys(obj)) {
			  const v = obj[k];
			  if (v && typeof v === "object") walk(v);
			  if (["amount", "currency", "cost", "budget_total"].includes(k)) {
				delete obj[k];
			  }
			  if (typeof v === "string") {
				obj[k] = v.replace(/[£$€₹¥]/g, "");
			  }
			}
		  };
		  walk(report);
		  return report;
		}
	
		/* ─── build prompt ─── */
		const hintChannels = JSON.stringify(channelByMotion[form.motion] || []);
		const hintFunnel   = funnelByMotion[form.motion]  || "";
		const hintKpis     = JSON.stringify(kpisByMotion[form.motion] || []);
	
		const derivedGoal =
		  form.motion === "custom" && form.action_custom
			? `Goal aligned to: ${form.action_custom}`
			: defaultGoalByMotion[form.motion] || "Goal aligned to main action";
	
		const customLine =
		  form.motion === "custom" && form.action_custom
			? `Custom main action: ${form.action_custom}\n`
			: "";
	
		/* add competitor guard */
		let competitorLine = "";
		if (Array.isArray(form.competitors) && form.competitors.length) {
		  competitorLine = `Competitors: ${form.competitors.join(", ")}`;
		} else {
		  competitorLine = "Competitors: None specified. Do not invent names.";
		}
	
		let prompt = `You are a Mark-Ritson-meets-Kotler marketing strategist. \
	Use British English; avoid en/em dashes. **Each section must be ~120-150 words, written as mini-tutorials that explain the marketing idea, why it matters, and how to execute it.** Explain every acronym at first use.

	
	INPUT
	Country: ${form.country}
	Sector: ${form.sector}
	Offering: ${form.product_type}
	Target segments: ${
			Array.isArray(form.audiences) && form.audiences.length
			  ? form.audiences.join(", ")
			  : "General market"
		  }
	Primary goal: ${derivedGoal}
	Main action: ${form.motion}
	${customLine}Budget level: ${form.budget_band || "low"}  # none | low | medium | high
	Regions: ${
			Array.isArray(form.regions) && form.regions.length
			  ? form.regions.join(", ")
			  : "Not specified"
		  }
	${competitorLine}
	
	HINTS
	- channel_intent_map: ${hintChannels}
	- funnel_equations:   ${hintFunnel}
	- kpi_suggestions:    ${hintKpis}
	
	Also add:
	- "strategy_pillars": three guiding themes with "Why it matters".
	- "personas": three persona objects { name, summary, pain_points }.
	- "competitors_brief": only if provided; otherwise omit.
	- "differentiation_moves": list of concrete moves + purpose.
	- "risks": { issue, mitigation }[].
	
	Each Quick-Win bullet must include WHAT, HOW, and WHY.  
	After every bullet add "Why it works:" then one short sentence.
	
	TASK
	Create a rigorous GTM plan as JSON with keys:
	meta, stp, mix_7ps, channel_intent_map, budget,
	calendar_90d, kpis, experiments, evidence_ledger,
	funnel_math, assumptions, strategy_pillars,
	personas, differentiation_moves, risks.
	
	STP (Segmentation-Targeting-Positioning) structure:
	- stp.intro : one sentence on STP importance.
	- stp.segmentation  : { basis, segments:[{ name, needs, signals }] }
	- stp.targeting     : { primary, secondary, rationale }
	- stp.positioning   : { statement, reasons_to_believe, differentiation_notes }
	
	REQUIREMENTS
	- Map funnel & KPIs to Main action.
	- Percentages only – no currency.
	- Honour budget.band tiers.
	- Explain every marketing term on first use.
	- No invented competitor names.
	
	OUTPUT
	Return **valid JSON only**.`;
	
		/* 4. OpenAI call */
		try {
		  const ai = await fetch("https://api.openai.com/v1/chat/completions", {
			method: "POST",
			headers: {
			  "Content-Type": "application/json",
			  Authorization: `Bearer ${env.OPENAI_API_KEY}`
			},
			body: JSON.stringify({
			  model: MODEL,
			  temperature: 0.6,
			  top_p: 1,
			  max_tokens: 2000,
			  response_format: { type: "json_object" },
			  messages: [
				{ role: "system",
				  content: "You are a Mark-Ritson-meets-Kotler marketing strategist. \
	Use British English; avoid en/em dashes; explain every acronym." },
				...EXAMPLES.map(t => ({ role: "assistant", content: t })),
				{ role: "user", content: prompt }
			  ]
			})
		  });
	
		  const out = await ai.json();
		  if (!ai.ok) {
			return new Response(
			  JSON.stringify({ error:"openai_error", detail: out }),
			  cors(ai.status)
			);
		  }
	
		  let json;
		  try {
			const content = out.choices?.[0]?.message?.content;
			json = content ? JSON.parse(content)
						   : { error:"no_content", detail: out };
		  } catch (e) {
			json = { error:"bad_model_json", raw:out, parseError:String(e) };
		  }
	
		  if (!json.error) {
			json = applyMotionDefaults(json, form);
			json = stripCurrencyAndAmounts(json);
		  }
	
		  return new Response(JSON.stringify(json), {
			...cors(),
			headers: { ...cors().headers, "Content-Type":"application/json" }
		  });
	
		} catch (err) {
		  return new Response(
			JSON.stringify({ error:"worker_crash", detail:String(err) }),
			cors(500)
		  );
		}
	  }
	};
	
	/* CORS helper */
	function cors(status = 200) {
	  return {
		status,
		headers: {
		  "Access-Control-Allow-Origin": "*",
		  "Access-Control-Allow-Headers": "Content-Type, Authorization",
		  "Access-Control-Allow-Methods": "POST,OPTIONS",
		  "Access-Control-Max-Age": "86400"
		}
	  };
	}