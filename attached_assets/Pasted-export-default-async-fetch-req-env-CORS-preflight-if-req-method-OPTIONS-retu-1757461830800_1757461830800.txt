export default {
	async fetch(req, env) {
	  // CORS preflight
	  if (req.method === "OPTIONS") return new Response(null, cors());
  
	  const url = new URL(req.url);
	  if (req.method !== "POST" || url.pathname !== "/generate") {
		return new Response(JSON.stringify({ ok: true, routes: ["/generate"] }), cors());
	  }
  
	  // Read JSON body
	  let form;
	  try {
		form = await req.json();
	  } catch {
		return new Response(JSON.stringify({ error: "bad_json" }), cors(400));
	  }
  
	  // ---- Motion lookup helpers (channels, funnel, KPIs) ----
	  const channelByMotion = {
		ecom_checkout: [
		  { channel: "Search", intent: "high", role: "capture" },
		  { channel: "Paid social", intent: "mid", role: "spark demand" }
		],
		marketplace_checkout: [
		  { channel: "Marketplace ads", intent: "high", role: "capture" },
		  { channel: "Search", intent: "mid", role: "assist" }
		],
		store_visit: [
		  { channel: "Local search", intent: "high", role: "drive visits" },
		  { channel: "Maps/GBP", intent: "high", role: "presence" }
		],
		call_now: [
		  { channel: "Call-extensions search", intent: "high", role: "click to call" },
		  { channel: "Local search", intent: "high", role: "capture" }
		],
		lead_capture: [
		  { channel: "Search", intent: "high", role: "capture" },
		  { channel: "Retargeting", intent: "mid", role: "nudge" }
		],
		booking: [
		  { channel: "Search", intent: "high", role: "capture" },
		  { channel: "Local social", intent: "mid", role: "presence" }
		],
		saas_trial: [
		  { channel: "Search", intent: "high", role: "capture" },
		  { channel: "Content/SEO", intent: "mid", role: "educate" }
		],
		saas_demo: [
		  { channel: "Search", intent: "high", role: "capture" },
		  { channel: "LinkedIn", intent: "mid", role: "target accounts" }
		],
		app_install: [
		  { channel: "App store ads", intent: "high", role: "convert" },
		  { channel: "Paid social", intent: "mid", role: "scale" }
		],
		donation: [
		  { channel: "Search", intent: "high", role: "capture intent" },
		  { channel: "Email", intent: "mid", role: "appeal" }
		],
		enrolment: [
		  { channel: "Search", intent: "high", role: "capture" },
		  { channel: "Content", intent: "mid", role: "inform" }
		],
		wholesale_inquiry: [
		  { channel: "Search", intent: "high", role: "capture B2B" },
		  { channel: "LinkedIn", intent: "mid", role: "prospect" }
		],
		partner_recruitment: [
		  { channel: "Search", intent: "high", role: "capture partners" },
		  { channel: "Partnership outreach", intent: "mid", role: "recruit" }
		]
	  };
  
	  const funnelByMotion = {
		ecom_checkout: "Impressions × CTR = Clicks; Clicks × CVR = Orders; Orders × AOV = Revenue",
		marketplace_checkout: "Impressions × CTR = Clicks; Clicks × CVR = Orders; Orders × AOV = Revenue",
		store_visit: "Impressions × CTR = Clicks; Clicks × Action rate = Directions; Directions × Visit rate = Visits",
		call_now: "Impressions × CTR = Clicks; Clicks × Call rate = Calls; Calls × Booked rate = Jobs",
		lead_capture: "Impressions × CTR = Clicks; Clicks × CVR = Leads; Leads × Qual rate = Qualified leads",
		booking: "Impressions × CTR = Clicks; Clicks × CVR = Bookings; Bookings × Show rate = Attended",
		saas_trial: "Impressions × CTR = Clicks; Clicks × Trial rate = Trials; Trials × Activation rate = Active trials",
		saas_demo: "Impressions × CTR = Clicks; Clicks × Form rate = Demo requests; Requests × SQO rate = SQOs",
		app_install: "Impressions × CTR = Clicks; Clicks × Install rate = Installs; Installs × D7 retain = Retained users",
		donation: "Impressions × CTR = Clicks; Clicks × Donate rate = Donations; Donations × Avg gift = Revenue",
		enrolment: "Impressions × CTR = Clicks; Clicks × Enquiry rate = Enquiries; Enquiries × Enrol rate = Enrolments",
		wholesale_inquiry: "Impressions × CTR = Clicks; Clicks × Form rate = Enquiries; Enquiries × SQL rate = SQLs",
		partner_recruitment: "Impressions × CTR = Clicks; Clicks × Apply rate = Partner applications; Applications × Approval rate = Partners"
	  };
  
	  const kpisByMotion = {
		ecom_checkout: [
		  { name: "Orders", definition: "Completed purchases", reason: "Primary outcome" },
		  { name: "Cost per order", definition: "Spend ÷ Orders", reason: "Efficiency" },
		  { name: "CVR", definition: "Orders ÷ Clicks", reason: "Page effectiveness" },
		  { name: "CTR", definition: "Clicks ÷ Impressions", reason: "Ad fit" }
		],
		lead_capture: [
		  { name: "Leads", definition: "Valid forms and calls", reason: "Top of funnel" },
		  { name: "Qualified leads", definition: "Fit plus intent", reason: "Sales quality" },
		  { name: "Cost per lead", definition: "Spend ÷ Leads", reason: "Efficiency" },
		  { name: "Lead to job rate", definition: "Jobs ÷ Qualified leads", reason: "Throughput" }
		]
		// extend for other motions if you want more detailed KPI sets
	  };
  
	  function applyMotionDefaults(report, form) {
		const isCustom = form.motion === "custom";
  
		if (!isCustom) {
		  if (!Array.isArray(report.channel_intent_map) || report.channel_intent_map.length === 0) {
			report.channel_intent_map = channelByMotion[form.motion] || [];
		  }
		  report.funnel_math = report.funnel_math || {};
		  if (!report.funnel_math.equations) {
			report.funnel_math.equations = funnelByMotion[form.motion] || "Impressions × CTR = Clicks; Clicks × CVR = Conversions";
		  }
		  if (!report.kpis || !Array.isArray(report.kpis.list) || report.kpis.list.length === 0) {
			report.kpis = report.kpis || {};
			report.kpis.why_kpis = report.kpis.why_kpis || "Direct line from effort to outcome.";
			report.kpis.list = kpisByMotion[form.motion] || [
			  { name: "CTR", definition: "Clicks ÷ Impressions", reason: "Ad fit" }
			];
		  }
		} else {
		  // for custom actions, provide structure but let the model define specifics
		  report.funnel_math = report.funnel_math || {};
		  report.kpis = report.kpis || { list: [] };
		}
  
		// ensure budget has the chosen band, and no currency
		report.budget = report.budget || {};
		report.budget.band = form.budget_band || report.budget.band || "low";
  
		return report;
	  }
  
	  function stripCurrencyAndAmounts(report) {
		// remove explicit currency fields and amounts if present
		const scrub = (obj) => {
		  if (!obj || typeof obj !== "object") return;
		  for (const k of Object.keys(obj)) {
			const v = obj[k];
			if (v && typeof v === "object") scrub(v);
			// drop common amount fields
			if (k === "amount" || k === "currency" || k === "budget_total" || k === "cost") {
			  delete obj[k];
			}
			// convert strings that start with currency symbols to plain text
			if (typeof v === "string") {
			  obj[k] = v.replace(/[£$€₹¥]/g, "");
			}
		  }
		};
		scrub(report);
		return report;
	  }
  
	  // ---- Build prompt with hints and budget band only ----
	  const hintChannels = JSON.stringify(channelByMotion[form.motion] || []);
	  const hintFunnel = funnelByMotion[form.motion] || "";
	  const hintKpis = JSON.stringify(kpisByMotion[form.motion] || []);
	  const customLine =
		form.motion === "custom" && form.action_custom
		  ? `Custom main action: ${form.action_custom}\n`
		  : "";
  
	  const prompt = `You are a senior marketing strategist. Use British English. Do not use en or em dashes. Be concrete.
  
  INPUT
  Country: ${form.country}
  Sector: ${form.sector}
  Offering: ${form.product_type}
  Target segments: ${Array.isArray(form.audiences) && form.audiences.length ? form.audiences.join(", ") : "General market"}
  Primary goal: ${form.goal}
  Main action: ${form.motion}
  ${customLine}Budget level: ${form.budget_band || "low"}      # bands: none, low, medium, high
  Regions: ${Array.isArray(form.regions) && form.regions.length ? form.regions.join(", ") : "Not specified"}
  Competitors: ${Array.isArray(form.competitors) && form.competitors.length ? form.competitors.join(", ") : "Not specified"}
  
  HINTS
  - channel_intent_map: ${hintChannels}
  - funnel_equations: ${hintFunnel}
  - kpi_suggestions: ${hintKpis}
  
  TASK
  Create a rigorous GTM plan as JSON with these keys: meta, positioning, mix_7ps, channel_intent_map, budget, calendar_90d, kpis, experiments, evidence_ledger, funnel_math, assumptions.
  
  REQUIREMENTS
  - Map funnel and KPIs to the Main action.
  - Allocate percentages only. Do not show currency amounts anywhere.
  - Budget.band semantics:
	- none: organic only, no paid media. Backlog any paid tasks.
	- low: one paid capture channel at small scale plus minimal retargeting.
	- medium: two to three paid channels with basic testing.
	- high: multi channel with experiments and content production.
  - Every strong claim must have an evidence_ledger row; if proof is missing, set status="required".
  - Show funnel equations; if numbers are missing, use Unknown placeholders.
  - Keep bullets short and practical.
  
  OUTPUT
  Return ONLY valid JSON.`;
  
	  try {
		const ai = await fetch("https://api.openai.com/v1/chat/completions", {
		  method: "POST",
		  headers: {
			"Content-Type": "application/json",
			Authorization: `Bearer ${env.OPENAI_API_KEY}`
		  },
		  body: JSON.stringify({
			model: form.model || "gpt-4o-mini",
			messages: [{ role: "user", content: prompt }],
			response_format: { type: "json_object" },
			max_tokens: 1500,
			temperature: 0.4
		  })
		});
  
		const out = await ai.json();
		if (!ai.ok) {
		  return new Response(JSON.stringify({ error: "openai_error", detail: out }), cors(ai.status));
		}
  
		let json;
		try {
		  const content = out.choices?.[0]?.message?.content;
		  json = content ? JSON.parse(content) : { error: "no_content", detail: out };
		} catch (parseError) {
		  json = {
			error: "bad_model_json",
			raw: out.choices?.[0]?.message?.content || JSON.stringify(out),
			parseError: String(parseError)
		  };
		}
  
		if (!json.error) {
		  json = applyMotionDefaults(json, form);
		  json = stripCurrencyAndAmounts(json);
		}
  
		return new Response(JSON.stringify(json), {
		  ...cors(),
		  headers: { ...cors().headers, "Content-Type": "application/json" }
		});
	  } catch (err) {
		return new Response(JSON.stringify({ error: "worker_crash", detail: String(err) }), cors(500));
	  }
	}
  };
  
  // CORS helper
  function cors(status = 200) {
	return {
	  status,
	  headers: {
		"Access-Control-Allow-Origin": "*",
		"Access-Control-Allow-Headers": "Content-Type, Authorization",
		"Access-Control-Allow-Methods": "POST,OPTIONS",
		"Access-Control-Max-Age": "86400"
	  }
	};
  }
  