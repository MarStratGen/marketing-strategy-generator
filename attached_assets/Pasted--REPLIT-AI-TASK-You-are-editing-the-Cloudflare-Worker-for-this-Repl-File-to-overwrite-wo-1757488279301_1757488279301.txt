## REPLIT AI TASK
You are editing the Cloudflare Worker for this Repl.

**File to overwrite:**  
/workers/worker.js

**Replace its entire contents with the code below.**  
After saving, click the green **Run** button; if it builds, deploy the new Worker in Cloudflare.

```js
/*  ─────────────────────────────────────────────
    Cloudflare Worker  ·  glow-api-…
    ───────────────────────────────────────────── */
const MODEL = "gpt-4o";           // higher-quality model
const EXAMPLES = [
`Quick Wins
• TikTok Creator Collab – send free sample packs to 5 Ag-TikTokers, ask for a 30-sec field-test clip. Why it works: borrowed reach + authentic proof.
• SEO Meta-Fix Sprint – optimise the top 20 seed pages’ titles & meta descriptions for “heirloom tomato seeds”. Why it works: fastest organic uplift.
Long-Term Bets
• Community-led Agronomy Hub – launch a Slack group for small-acreage farmers, weekly AMAs with a soil scientist. Why it works: locks-in share-of-voice.`,

`Quick Wins
• LinkedIn Outreach Blitz – identify 40 ideal B2B seed buyers, send 10 personally-tailored DMs offering a free mini soil-test kit … Why it works: high-intent channel.`,
`Quick Wins
• 24-hour Value Post Series – 3-post thread on X about seed germination hacks; CTA to a landing page … Why it works: immediate micro-trust.`,
];

export default {
  async fetch(req, env) {
    /* 1. CORS pre-flight */
    if (req.method === "OPTIONS") return new Response(null, cors());

    /* 2. only POST /generate */
    const url = new URL(req.url);
    if (req.method !== "POST" || url.pathname !== "/generate") {
      return new Response(
        JSON.stringify({ ok: true, routes: ["/generate"] }),
        cors()
      );
    }

    /* 3. read JSON body */
    let form;
    try { form = await req.json(); }
    catch { return new Response(JSON.stringify({ error:"bad_json"}), cors(400)); }

    /* ─── lookup helpers (unchanged) ─── */
    const channelByMotion = { …same as before… };
    const funnelByMotion  = { … };
    const kpisByMotion    = { … };
    const defaultGoalByMotion = { … };

    function applyMotionDefaults(report, form) { /* same as before */ }
    function stripCurrencyAndAmounts(report)  { /* same as before */ }

    /* ─── build prompt ─── */
    const hintChannels = JSON.stringify(channelByMotion[form.motion] || []);
    const hintFunnel   = funnelByMotion[form.motion]  || "";
    const hintKpis     = JSON.stringify(kpisByMotion[form.motion] || []);

    const derivedGoal =
      form.motion === "custom" && form.action_custom
        ? `Goal aligned to: ${form.action_custom}`
        : defaultGoalByMotion[form.motion] || "Goal aligned to main action";

    const customLine =
      form.motion === "custom" && form.action_custom
        ? `Custom main action: ${form.action_custom}\n`
        : "";

    /* add competitor guard */
    let competitorLine = "";
    if (Array.isArray(form.competitors) && form.competitors.length) {
      competitorLine = `Competitors: ${form.competitors.join(", ")}`;
    } else {
      competitorLine = "Competitors: None specified. Do not invent names.";
    }

    let prompt = `You are a Mark-Ritson-meets-Kotler marketing strategist. \
Use British English; avoid en/em dashes. Explain every acronym at first use.

INPUT
Country: ${form.country}
Sector: ${form.sector}
Offering: ${form.product_type}
Target segments: ${
        Array.isArray(form.audiences) && form.audiences.length
          ? form.audiences.join(", ")
          : "General market"
      }
Primary goal: ${derivedGoal}
Main action: ${form.motion}
${customLine}Budget level: ${form.budget_band || "low"}  # none | low | medium | high
Regions: ${
        Array.isArray(form.regions) && form.regions.length
          ? form.regions.join(", ")
          : "Not specified"
      }
${competitorLine}

HINTS
- channel_intent_map: ${hintChannels}
- funnel_equations:   ${hintFunnel}
- kpi_suggestions:    ${hintKpis}

Also add:
- "strategy_pillars": three guiding themes with “Why it matters”.
- "personas": three persona objects { name, summary, pain_points }.
- "competitors_brief": only if provided; otherwise omit.
- "differentiation_moves": list of concrete moves + purpose.
- "risks": { issue, mitigation }[].

Each Quick-Win bullet must include WHAT, HOW, and WHY.  
After every bullet add “Why it works:” then one short sentence.

TASK
Create a rigorous GTM plan as JSON with keys:
meta, stp, mix_7ps, channel_intent_map, budget,
calendar_90d, kpis, experiments, evidence_ledger,
funnel_math, assumptions, strategy_pillars,
personas, differentiation_moves, risks.

STP (Segmentation-Targeting-Positioning) structure:
- stp.intro : one sentence on STP importance.
- stp.segmentation  : { basis, segments:[{ name, needs, signals }] }
- stp.targeting     : { primary, secondary, rationale }
- stp.positioning   : { statement, reasons_to_believe, differentiation_notes }

REQUIREMENTS
- Map funnel & KPIs to Main action.
- Percentages only – no currency.
- Honour budget.band tiers.
- Explain every marketing term on first use.
- No invented competitor names.

OUTPUT
Return **valid JSON only**.`;

    /* 4. OpenAI call */
    try {
      const ai = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${env.OPENAI_API_KEY}`
        },
        body: JSON.stringify({
          model: MODEL,
          temperature: 0.3,
          top_p: 0.9,
          max_tokens: 2000,
          response_format: { type: "json_object" },
          messages: [
            { role: "system",
              content: "You are a Mark-Ritson-meets-Kotler marketing strategist. \
Use British English; avoid en/em dashes; explain every acronym." },
            ...EXAMPLES.map(t => ({ role: "assistant", content: t })),
            { role: "user", content: prompt }
          ]
        })
      });

      const out = await ai.json();
      if (!ai.ok) {
        return new Response(
          JSON.stringify({ error:"openai_error", detail: out }),
          cors(ai.status)
        );
      }

      let json;
      try {
        const content = out.choices?.[0]?.message?.content;
        json = content ? JSON.parse(content)
                       : { error:"no_content", detail: out };
      } catch (e) {
        json = { error:"bad_model_json", raw:out, parseError:String(e) };
      }

      if (!json.error) {
        json = applyMotionDefaults(json, form);
        json = stripCurrencyAndAmounts(json);
      }

      return new Response(JSON.stringify(json), {
        ...cors(),
        headers: { ...cors().headers, "Content-Type":"application/json" }
      });

    } catch (err) {
      return new Response(
        JSON.stringify({ error:"worker_crash", detail:String(err) }),
        cors(500)
      );
    }
  }
};

/* CORS helper */
function cors(status = 200) {
  return {
    status,
    headers: {
      "Access-Control-Allow-Origin": "*",
      "Access-Control-Allow-Headers": "Content-Type, Authorization",
      "Access-Control-Allow-Methods": "POST,OPTIONS",
      "Access-Control-Max-Age": "86400"
    }
  };
}
