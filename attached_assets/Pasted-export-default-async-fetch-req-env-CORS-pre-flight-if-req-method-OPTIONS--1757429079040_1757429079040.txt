export default {
	async fetch(req, env) {
	  /* CORS pre-flight */
	  if (req.method === "OPTIONS") return new Response(null, cors());
  
	  /* only POST /generate */
	  const url = new URL(req.url);
	  if (req.method !== "POST" || url.pathname !== "/generate") {
		return new Response(
		  JSON.stringify({ ok: true, routes: ["/generate"] }),
		  cors()
		);
	  }
  
	  /* read request JSON */
	  let form;
	  try { form = await req.json(); }
	  catch { return new Response(JSON.stringify({ error: "bad_json" }), cors(400)); }
  
	  /* --- JSON-Schema stays the same (truncated here for brevity) --- */
	  const marketingPlanSchema = { /* … exact schema from last paste … */ };
  
	  try {
		/* call OpenAI */
		const ai = await fetch("https://api.openai.com/v1/responses", {
		  method: "POST",
		  headers: {
			"Content-Type": "application/json",
			Authorization: `Bearer ${env.OPENAI_API_KEY}`
		  },
		  body: JSON.stringify({
			model: form.model || "gpt-4o-mini",
			input: [{ type: "message", role: "user", content: JSON.stringify(form) }],
			text: { format: marketingPlanSchema },
			instructions: `
  You are a senior marketing strategist. Produce a GTM plan (STP, 7 Ps, budget,
  calendar, KPIs). Use the given currency & budget. No real-person names.
  Return ONLY JSON valid for marketing_plan_v1.`
		  })
		});
  
		const out = await ai.json();
		if (!ai.ok) {
		  return new Response(JSON.stringify({ error: "openai_error", detail: out }),
							 cors(ai.status));
		}
  
		/* ----- SUCCESS: ensure we return VALID JSON ----- */
		let raw;
		if (Array.isArray(out.choices) && out.choices[0]?.message?.text) {
		  raw = out.choices[0].message.text;
		} else if (out.text) {
		  raw = out.text;
		} else {
		  raw = JSON.stringify(out);        // fallback
		}
  
		let json;
		try { json = JSON.parse(raw); }           // turn string → object
		catch { json = { error: "bad_model_json", raw }; }
  
		return new Response(JSON.stringify(json), {
		  ...cors(),
		  headers: {
			...cors().headers,
			"Content-Type": "application/json"   // <— key piece
		  }
		});
  
	  } catch (err) {
		return new Response(
		  JSON.stringify({ error: "worker_crash", detail: String(err) }),
		  cors(500)
		);
	  }
	}
  };
  
  /* CORS helper */
  function cors(status = 200) {
	return {
	  status,
	  headers: {
		"Access-Control-Allow-Origin": "*",
		"Access-Control-Allow-Headers": "Content-Type, Authorization",
		"Access-Control-Allow-Methods": "POST,OPTIONS",
		"Access-Control-Max-Age": "86400"
	  }
	};
  }
  